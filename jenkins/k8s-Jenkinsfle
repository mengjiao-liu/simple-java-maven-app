#!/usr/bin/env groovy

/**
 * This pipeline will build and deploy a Docker image with Kaniko
 * https://github.com/GoogleContainerTools/kaniko
 * without needing a Docker host
 *
 * You need to create a jenkins-docker-cfg secret with your docker config
 * as described in
 * https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#create-a-secret-in-the-cluster-that-holds-your-authorization-token
 */

podTemplate(yaml: """
              kind: Pod
              spec:
                containers:
                - name: maven
                  image: maven:3.8.1-adoptopenjdk-11
                  imagePullPolicy: IfNotPresent
                  command:
                  - sleep
                  args:
                  - 99d
                  volumeMounts:
                    - name: maven-cache
                      mountPath: /root/.m2
                - name: kaniko
                  image: registry.cn-shanghai.aliyuncs.com/kerthcet-public/kaniko-executor:v1.6.0-debug
                  imagePullPolicy: Always
                  command:
                  - sleep
                  args:
                  - 99d
                  volumeMounts:
                    - name: jenkins-docker-cfg
                      mountPath: /kaniko/.docker
                - name: golang
                  image: golang:1.16
                  command:
                    - sleep
                  args:
                    - 99d
                  env:
                    - name: GOPROXY
                      value: https://goproxy.cn
                    - name: GO111MODULE
                      value: 'on'
                    - name: ALLURE_RESULTS_PATH
                      value: /home/jenkins/agent/workspace/jenkins-ci
                  envFrom:
                    - secretRef:
                        name: slack
                - name: kubectl
                  image: registry.cn-shanghai.aliyuncs.com/kerthcet-public/helm-kubectl:3.6.3
                  imagePullPolicy: IfNotPresent
                  volumeMounts:
                    - name: jenkins-kubectl-config
                      mountPath: /root/.kube
                  command:
                  - sleep
                  args:
                  - 99d
                volumes:
                - name: jenkins-docker-cfg
                  projected:
                    sources:
                    - secret:
                        name: regcred
                        items:
                          - key: .dockerconfigjson
                            path: config.json
                - name: jenkins-kubectl-config
                  projected:
                    sources:
                    - secret:
                        name: lmj-cluster-kubectl
                        items:
                          - key: 9-21-kubectlconfig
                            path: config
                - name: maven-cache
                  hostPath:
                    path: /data/jenkins-maven-sample-cache
                    type: DirectoryOrCreate
"""
  ) {

  node(POD_LABEL) {
    def BRANCH = 'master'
    def image_tag = '1'
    stage('Git') {
        sh 'printenv'
        echo "Git Clone Stage"
        git url: 'https://github.com/mengjiao-liu/simple-java-maven-app',
        // credentialsId: 'gitlab',
        branch: "${BRANCH}"

        script{
               env.commit = sh (script: 'git rev-parse --short HEAD ${GIT_COMMIT}', returnStdout: true).trim()
               echo "commit: ${commit}" 
               echo "branch: ${BRANCH}" 
               image_tag = "${BRANCH}-${commit}"
               echo "image_tag: ${image_tag}"
        }

    }

    stage('Build') {
      container('maven') {
        sh '''
          mvn -B -DskipTests clean package
        '''
      }
    }


    stage('Notification') {
      container('golang') {
        sh '''
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Java Maven Build passed"}' $SLACK_URL
        '''
      }
    }

    stage('Test') {
      container('maven') {
        sh '''
          mvn test
          echo "mvn test finish"
        '''
      }
      junit 'target/surefire-reports/*.xml' 
    }

    stage('Notification') {
      container('golang') {
        sh '''
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Java Maven test passed."}' $SLACK_URL
        '''
      }
    }
    
    stage('Build with Kaniko') {
      container('kaniko') {
        echo "Kaniko build image tag: ${image_tag}"
        sh  """
          /kaniko/executor -f Dockerfile -c `pwd` --use-new-run=true --snapshotMode=redo --insecure-pull --insecure --skip-tls-verify --destination=registry2.daocloud.cn:30842/bookinfo/simple-java-maven-app:${image_tag}
        """
      }
  	}

    stage('Notification') {
      container('golang') {
        sh '''
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Build Java maven image successfully!"}' $SLACK_URL
        '''
      }
    }

    stage('Yaml') {
      container('golang') {
        sh """
          echo "Change YAML File Stage"
          sed -i "s/<BUILD_TAG>/${image_tag}/" deploy.yaml
          cat deploy.yaml
        """
      }
    }
    stage('Deploy') {
      container('kubectl') {
        sh '''
          echo "Deploy Stage"
          kubectl config  view
          cat deploy.yaml
          kubectl apply -f deploy.yaml
        '''
      }
    }
    stage('Notification deploy') {
      container('golang') {
        sh '''
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Deploy  Java Maven sample  k8s yaml successfully!"}' $SLACK_URL
        '''
      }
    }

  }
}
